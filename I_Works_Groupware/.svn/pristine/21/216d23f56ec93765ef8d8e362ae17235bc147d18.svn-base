package kr.or.ddit.controller.files;

import java.io.File;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.inject.Inject;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import javax.servlet.jsp.PageContext;

import org.apache.commons.collections.map.HashedMap;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.SessionAttribute;

import kr.or.ddit.service.IFileService;
import kr.or.ddit.vo.FileVO;
import kr.or.ddit.vo.FolderVO;

@Controller
public class indFilesController {
	
	@Inject
	private IFileService service;
	
	private void setFileBar(Model model) {
		String fileBar = "EXIST";
		model.addAttribute("fileBar", fileBar);
	}
	
	// 개인자료실로 이동
	@RequestMapping(value="/indfiles.do", method=RequestMethod.GET)
	public String IndividualFiles(Model model, HttpServletRequest req, HttpServletResponse resp) {
		
		// 파일을 업로드하고 업로드한 위치로 돌려주는 로직
		HttpSession session = req.getSession();
		System.out.println(req.getSession().getAttribute("folderCd"));
		if(session==null) {
		}else {
			String folderCd = (String)session.getAttribute("folderCd");
			session.removeAttribute("folderCd");
			if(folderCd==null) {
			}else {
				FolderVO folderVO = new FolderVO();
				folderVO.setFolderCd(folderCd);
				List<FolderVO> childFolder = service.selectChildFolder(folderVO);
				
				model.addAttribute("FolderList", childFolder);
				model.addAttribute("parentCd", folderVO);
				
				return "main/files/individualFiles";
			}
		}
		
		// 파일을 업로드하지 않고 순수 get방식으로 접근했을때 처음위치를 보여주는 로직.
		FolderVO folderVO = new FolderVO();
		System.out.println("디폴트 폴더 가져오기");
		folderVO = service.selectIndFolder(folderVO);
		System.out.print("폴더보 : ");
		System.out.println(folderVO);
		System.out.println("디폴트폴더 차일드 가져오기");
		List<FolderVO> FolderList = service.selectChildFolder(folderVO);
		
		model.addAttribute("parentCd", folderVO);
		model.addAttribute("FolderList",FolderList);
		setFileBar(model);
		return "main/files/individualFiles";
	}
	
	// POST로 데이터를 받아 폴더안쪽으로 이동
	@RequestMapping(value="/indfiles.do", method=RequestMethod.POST)
	public String IndevidualFiles(Model model, FolderVO folderVO) {
		
		List<FolderVO> childFolder = service.selectChildFolder(folderVO);
		
		model.addAttribute("FolderList", childFolder);
		model.addAttribute("parentCd", folderVO);
		setFileBar(model);
		return "main/files/individualFiles";
	}
	

	@RequestMapping(value="/InsertIndFileFolder.do", method=RequestMethod.POST)
	public String InsertIndFileFolder(
			FolderVO folderVO, 
			Model model, 
			HttpServletRequest req, HttpServletResponse resp) {
		
		service.insertIndFolder(folderVO , req, resp);
		
		return "redirect:/indfiles.do";	
	}
	
	@RequestMapping(value="/insertIndFileFile.do", method=RequestMethod.POST)
	public String InsertIndFileFile(
			FolderVO folderVO,
			Model model,
			HttpServletRequest req, HttpServletResponse resp) {
		
		service.insertIndFile(folderVO, req, resp);
		
		return "redirect:/indfiles.do";
	}
}
























