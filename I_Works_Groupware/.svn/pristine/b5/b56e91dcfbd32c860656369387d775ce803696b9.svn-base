package kr.or.ddit.controller.board;

import java.io.IOException;
import java.security.Principal;
import java.util.List;

import javax.inject.Inject;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import kr.or.ddit.ServiceResult;
import kr.or.ddit.service.IClubBoardService;
import kr.or.ddit.vo.ClubPostVO;
import kr.or.ddit.vo.ClubVO;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
public class ClubBoardController {
	
	@Inject
	private IClubBoardService service;
	
	/**
	 * 동호회메인 페이지
	 * @param model
	 * @return
	 */
	@RequestMapping(value="/clubmain.do", method=RequestMethod.GET)
	public String clubMain(Model model) {
		List<ClubVO> clubList = service.showAllClub();
		
		model.addAttribute("clubList", clubList);
		String boardBar = "EXIST";
		model.addAttribute("boardBar", boardBar);
		return "main/board/clubMainpage";
	}
	
	/**
	 * 내동호회 페이지
	 * @param model
	 * @return
	 */
	@RequestMapping(value="/clubmypage.do", method=RequestMethod.GET)
	public String clubMypage(Principal principal, Model model) {
		List<ClubVO> myClubList = service.showMyClub(principal.getName());
		
		model.addAttribute("myClubList", myClubList);
		String boardBar = "EXIST";
		model.addAttribute("boardBar", boardBar);
		return "main/board/clubMypage";
	}
	
	/**
	 * 동호회 상세 페이지
	 * @param model
	 * @param clubCd
	 * @return
	 */
	@RequestMapping(value="/clubdetail.do", method=RequestMethod.GET)
	public String clubDetail(Model model, String clubCd) {
		ClubVO club = service.showOneClub(clubCd);
		
		model.addAttribute("club", club);
		String boardBar = "EXIST";
		model.addAttribute("boardBar", boardBar);
		return "main/board/clubDetail";
	}
	
	@ResponseBody
	@RequestMapping(value="/clubboarddetail.do", method=RequestMethod.GET)
	public ResponseEntity<ClubPostVO> clubBoardDetail(String cpNo) {
		ClubPostVO clubPostVO = service.showClubBoardDetail(cpNo);
		
		ResponseEntity<ClubPostVO> entity = new ResponseEntity<ClubPostVO>(clubPostVO, HttpStatus.OK);
		return entity;
	}
	
	/**
	 * 동호회 게시판 글 등록
	 * @param principal
	 * @param model
	 * @param cbCd
	 * @param clubPostVO
	 * @return
	 */
	@PostMapping(value="/clubboard/{cbCd}/insert.do")
	public String clubBoardInsert(Principal principal, RedirectAttributes ra, @PathVariable String cbCd, ClubPostVO clubPostVO, MultipartFile[] files) {
		clubPostVO.setCbCd(cbCd.toUpperCase());
		clubPostVO.setCpwriterEmpno(principal.getName());
		try {
			service.insertClubPost(clubPostVO, files);
		} catch (IllegalStateException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		ra.addFlashAttribute("message", "정상적으로 등록되었습니다.");
		return "redirect:/clubdetail.do?clubCd="+clubPostVO.getClubCd();
	}
	
	/**
	 * 동호회개설 페이지(폼)
	 * @param model
	 * @return
	 */
	@RequestMapping(value="/createclub.do", method=RequestMethod.GET)
	public String createClubForm(Model model) {
		String boardBar = "EXIST";
		model.addAttribute("boardBar", boardBar);
		return "main/board/createClub";
	}
	
	/**
	 * 폼 제출 처리
	 * @param ClubVO(clubCd=null, clubName=운동하자아자, clubDate=null, clubInfo=바쁘다바빠 현대사회 운동으로 몸과 마음을 지킵시다, clubPhoto=null, clubReason=, clubEmpno=null, clubSe=null)
	 * @param file
	 * @param ra
	 * @return
	 */
	@PostMapping("/createclub.do")
	public String createClub(Principal principal, ClubVO clubVO, MultipartFile picture, RedirectAttributes ra) {
		log.info("createClub() 실행...!");
		log.debug("clubVO : {}", clubVO.toString()); // clubVO이 널이면 오류...?
		log.debug("picture : {}", picture);
		
		clubVO.setClubEmpno(principal.getName());
		try {
			service.createClub(clubVO, picture);
			// 메일 보내기 : 개설 요청 완료
		} catch (IllegalStateException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		ra.addFlashAttribute("message", "개설 요청이 완료되었습니다.<br>승인 결과는 메일을 통해 알려드립니다.");
		return "redirect:/createclub.do";
	}
	
	@RequestMapping(value="/cluball.do", method=RequestMethod.GET)
	public String clubAll(Model model) {
		String boardBar = "EXIST";
		model.addAttribute("boardBard", boardBar);
		return "main/board/cluball";
	}
}
