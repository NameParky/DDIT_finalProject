package kr.or.ddit.service.impl;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;

import javax.inject.Inject;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.compress.utils.IOUtils;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Service;
import org.springframework.util.FileCopyUtils;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import kr.or.ddit.mapper.FileMapper;
import kr.or.ddit.service.IFileService;
import kr.or.ddit.vo.FolderFileVO;
import kr.or.ddit.vo.FolderVO;

@Service
public class FileServiceImpl implements IFileService {
	
	@Inject
	private FileMapper mapper;
	
	private static void zipFolder(String sourceFolder, String currentFolder, ZipOutputStream zos) throws IOException {
		System.out.println("알집재귀호출 : ");
		System.out.println(currentFolder);
	    File folder = new File(currentFolder);
	    System.out.println("알집재귀폴더");
	    System.out.println(folder);
	    if (folder == null || !folder.exists() || !folder.isDirectory()) {
	        // 에러 처리: 폴더가 존재하지 않거나 폴더가 아닌 경우
	        return;
	    }

	    File[] files = folder.listFiles();
	    System.out.println("폴더리스트파일즈 : ");
	    System.out.println(folder.listFiles());
	    if (files == null) {
	        // 에러 처리: 폴더가 비어있거나 읽을 수 없는 경우
	        return;
	    }
	    
	    for (File file : files) {
	        if (file.isDirectory()) {
	            // 하위 폴더의 경우 재귀적으로 폴더를 압축
	            zipFolder(sourceFolder, file.getPath(), zos);
	        } else {
	            // 파일의 경우 압축
	            String entryName = file.getPath().substring(sourceFolder.length() + 1);
	            ZipEntry ze = new ZipEntry(entryName);
	            zos.putNextEntry(ze);

	            FileInputStream fis = new FileInputStream(file);
	            byte[] buffer = new byte[1024];
	            int len;
	            while ((len = fis.read(buffer)) > 0) {
	                zos.write(buffer, 0, len);
	            }

	            fis.close();
	            zos.closeEntry();
	        }
	    }
	}
	
	private String UserNoFind() {
		Object principal = SecurityContextHolder.getContext().getAuthentication().getPrincipal(); 
		UserDetails userDetails = (UserDetails)principal;
		String empNo = userDetails.getUsername();
		return empNo;
	}
	
	private List<String> FolderCreate(FolderVO folderVO, List<String> folderPathArray) {
		System.out.println("재귀호출 들어옴");
		if(folderVO.getFolderParent()==null) {
			System.out.println("재귀호출 널");	
			return folderPathArray;
		} else {
			System.out.println(folderVO.getFolderParent());
			String motherFolder = folderVO.getFolderParent();
			FolderVO parentFolder = mapper.selectParentFolder(motherFolder);
			// 코드가아닌 이름값을 집어넣어서 패스로 활용해야함.
			folderPathArray.add(parentFolder.getFolderName());
			FolderCreate(parentFolder, folderPathArray);
			System.out.println("재귀호출 낫널");
		}
		return folderPathArray;
	}
	
	@Override
	public String insertIndFolder(FolderVO folderVO, 
			HttpServletRequest req, HttpServletResponse resp) {
		folderVO.setEmpNo(UserNoFind());
		
		// 중요!!.
		// 현재 파라미터로 받은 값은 인서트가 안된 값이기 때문에 폴더코드가 없으므로
		// 부모코드가 있을 경우, 부모코드에 대한 내용을 꼭 받아와서 로직이 처리될 수 있게해야한다.
		List<String> folderPathArray = new ArrayList<String>();
		folderPathArray.add(folderVO.getFolderName());
		
		if(folderVO.getFolderParent()==null) {
			System.out.println("널");
		} else {
			System.out.println("낫널");
			// 폴더부모의 이름값들의 array를 리턴받기 위한 재귀호출.
			folderPathArray = FolderCreate(folderVO, folderPathArray);
		}
		
		String addPath = "";
		// for문 마이너스로 가야함.
		// 재귀호출 메소드에서 자식 >> 부모형태로 array가 쌓이므로 추가시킬땐 역순으로.
		for(int i = folderPathArray.size()-1; i >= 0; i--) {
			addPath += "/"+folderPathArray.get(i);
			System.out.println("i = "+i);
		}
		System.out.println(addPath);
		
		String path = req.getServletContext().getRealPath("/resources/file")+addPath;
		System.out.println(path);
		
		// 알집저장에 필요한 파라미터 folderPath를 위한 폴더패스 세팅
		folderVO.setFolderPath(path);
		
		File file = new File(path);
		
		if(!file.exists()) {
			file.mkdirs();
		}
		
		HttpSession session = req.getSession();
		System.out.println("세선에 넣은 값 : "+folderVO.getFolderParent());
		session.setAttribute("folderCd", folderVO.getFolderParent());
		
		FolderVO checkDupVO = new FolderVO();
		checkDupVO.setFolderCd(folderVO.getFolderParent());
		List<FolderVO> folderList = selectChildFolder(checkDupVO);
		for(FolderVO check : folderList) {
			if(check.getFolderName().equals(folderVO.getFolderName())) {
				session.setAttribute("dup", folderVO.getFolderName()+"은(는) 현재 사용중인 폴더명입니다.");
				return "redirect:/indfiles.do";
			}
		}
		
		mapper.insertIndFolder(folderVO);
		
		return null;
	}

	@Override
	public FolderVO selectIndFolder(FolderVO folderVO) {
		folderVO.setEmpNo(UserNoFind());
		folderVO.setFolderCd(UserNoFind());
		System.out.println("서비스 폴더보 사원명 : " + folderVO.getEmpNo());
		System.out.println("서비스 폴더코드 명 : " + folderVO.getFolderCd());
		return mapper.selectIndFolder(folderVO);
	}
	
	@Override
	public List<FolderVO> selectChildFolder(FolderVO folderVO) {
		return mapper.selectChildFolder(folderVO);
	}

	@Override
	public FolderVO selectParentFolder(String motherFolder) {
		return mapper.selectParentFolder(motherFolder);
	}

	@Override
	public FolderVO selectMyselfFolder(FolderVO folderVO) {
		return mapper.selectMyselfFolder(folderVO);
	}

	@Override
	public String insertIndFile(FolderVO folderVO,
			HttpServletRequest req, HttpServletResponse resp
			) throws IOException {
		System.out.println("인서트 서비스 시작");
		FolderVO folderFile = new FolderVO();
		FolderFileVO fileVO = new FolderFileVO();
		fileVO.setEmpNo(UserNoFind());
		
		FolderVO checkDupVO = new FolderVO();
		checkDupVO.setFolderCd(folderVO.getFolderParent());
		List<FolderFileVO> fileList = selectChildFile(checkDupVO);
		
		// 세션 미리 생성해주기.
		HttpSession session = req.getSession();
		System.out.println("세선에 넣은 값 : "+folderVO.getFolderParent());
		session.setAttribute("folderCd", folderVO.getFolderParent());
		
		// 파일명 중복검사.
		for(FolderFileVO check : fileList) {
			for(int i = 0; i < folderVO.getFoFile().length; i++) {
				
				String[] fileOrgNameArr = folderVO.getFoFile()[i].getOriginalFilename().split("\\.");
				String fileOrgName = "";
				for(int j = 0; j < fileOrgNameArr.length-1; j++) {
					System.out.println("대환장 네임들 : "+fileOrgNameArr[j]);
					fileOrgName += fileOrgNameArr[j];
				}
				if(check.getFileOrgname().equals(fileOrgName)) {
					session.setAttribute("fileDup", fileOrgName+"은(는) 현재 사용중인 파일명입니다.");
					return "redirect:/indfiles.do";
				}
			}
		}
		
		for(int i = 0; i < folderVO.getFoFile().length; i++) {
			
			String fileName = folderVO.getFoFile()[i].getOriginalFilename();
			System.out.println(fileName);
			String fileType = fileName.substring((fileName.lastIndexOf(".")+1));
			System.out.println(fileType);
			UUID randomName = UUID.randomUUID();
			System.out.println(randomName);
			String fileSavename = randomName+fileName;
			System.out.println(fileSavename);
			
			List<String> folderPathArray = new ArrayList<String>();
			
			if(folderVO.getFolderParent()==null) {
				System.out.println("널");
			} else {
				System.out.println("낫널");
				// 폴더부모의 이름값들의 array를 리턴받기 위한 재귀호출.
				folderPathArray = FolderCreate(folderVO, folderPathArray);
			}
			
			String addPath = "";
			// for문 마이너스로 가야함.
			// 재귀호출 메소드에서 자식 >> 부모형태로 array가 쌓이므로 추가시킬땐 역순으로.
			for(int j = folderPathArray.size()-1; j >= 0; j--) {
				addPath += "/"+folderPathArray.get(j);
				System.out.println("j = "+j);
			}
			System.out.println(addPath);
			
			// 일단 CRUD하듯이 멀티파트에 배열형태로 담겨져온 데이터를 SET해놓고.
			// target에 경로값, UUID+이름값을 담은후에
			// FileCopyUtils에 추가로 데이터값을 담아서 파일의 카피를 진행한다.
			// 만약 타겟에서 이름값을 보내주지 않으면 카피를 진행할때 이름이 설정되지않고 FOFILE(변수이름)로 저장되는것 같다.
			String fileSavepath = req.getServletContext().getRealPath("/"+"resources"+"/"+"file")+addPath;
			System.out.println(fileSavepath);
			
			String fileDataSavePath = "resources/file"+addPath+"/";
			File filePath = new File(fileSavepath);
			
			if(!filePath.exists()) {
				filePath.mkdirs();
			}
			
			byte[] fileData = folderVO.getFoFile()[i].getBytes();
			
			File target = new File(fileSavepath, fileSavename); // 파일 업로드 준비
			FileCopyUtils.copy(fileData, target); // 파일 복사 진행
			
			
			fileVO.setFileSec(i+1);
			// 다운로드 횟수
			fileVO.setFileDowncnt(0);
			// 즐겨찾기 여부
			fileVO.setFileLikese(1);
			// 파일 마임타입
			fileVO.setFileMime(folderVO.getFoFile()[i].getContentType());
			// 확장자명 제거한 순수이름 가져오기.
			String[] fileOrgNameArr = folderVO.getFoFile()[i].getOriginalFilename().split("\\.");
			String fileOrgName = "";
			for(int j = 0; j < fileOrgNameArr.length-1; j++) {
				System.out.println("대환장 네임들 : "+fileOrgNameArr[j]);
				fileOrgName += fileOrgNameArr[j];
			}
			// 파일이름
			fileVO.setFileOrgname(fileOrgName);
			// 파일 저장이름 (UUID포함)
			fileVO.setFileSavename(fileSavename);
			// 파일 저장경로
			fileVO.setFileSavepath(fileDataSavePath);
			// 파일 구분
			fileVO.setFileSe("개인");
			// 파일크기
			fileVO.setFileSize(folderVO.getFoFile()[i].getSize());
			// 파일 확장자
			fileVO.setFileType(fileType);
			System.out.println("폴더파일 폴더코드 : ");
			System.out.println(folderVO.getFolderParent());
			folderFile.setFolderCd(folderVO.getFolderParent());
			folderFile.setFileSec(i+1);
			System.out.println("파일인서트");
			mapper.insertIndFile(fileVO);
			System.out.println("폴더파일인서트");
			mapper.insertFolderFile(folderFile);
			// currval에 문제있는거 물어볼것.
			// 물어보고 해결되면 insertFolderFile작업 마무리하고
			// 교수님 시간되면 > 업로드 다운로드
			// 안되시면 리스트 띄워서 확장자별로 아이콘 따로주기 작업해놓을것.
		}
		return null;
	}

	@Override
	public List<FolderFileVO> selectChildFile(FolderVO folderVO) {
		return mapper.selectChildFile(folderVO);
	}

	@Override
	public void insertDefaultIndFolder(FolderVO folderVO) {
		folderVO.setEmpNo(UserNoFind());
		mapper.insertDefaultIndFolder(folderVO);
	}

	@Override
	public int selectDefaultIndFolder(FolderVO folderVO) {
		return mapper.selectDefaultIndFolder(folderVO);
	}

	@Override
	public FolderFileVO selectMyselfFile(FolderFileVO folderFileVO) {
		return mapper.selectMyselfFile(folderFileVO);
	}

	@Override
	public ResponseEntity<byte[]> fileDownload(String submitFileCd, HttpServletRequest request, HttpServletResponse response) throws UnsupportedEncodingException {
		
		FolderFileVO folderFileVO = new FolderFileVO();
		folderFileVO.setFileCd(submitFileCd);
		folderFileVO = mapper.selectMyselfFile(folderFileVO);
		
		String fileName = "";
		InputStream in = null;
		ResponseEntity<byte[]> entity = null;
		
		String headerKind = request.getHeader("User-Agent");
		
		if ((headerKind.contains("MSIE")) || (headerKind.contains("Trident")) || (headerKind.contains("Edge"))) {
		  fileName = URLEncoder.encode(folderFileVO.getFileOrgname(), "UTF-8");
		} else {
		  fileName = new String(folderFileVO.getFileOrgname().getBytes("UTF-8"), "iso-8859-1");
		}
		
		File file = new File(request.getServletContext().getRealPath("")
				+folderFileVO.getFileSavepath() ,folderFileVO.getFileSavename());
		
		fileName += "."+folderFileVO.getFileType();
		
		try {
			HttpHeaders header = new HttpHeaders();
			in = new FileInputStream(file);
			header.setContentType(MediaType.APPLICATION_OCTET_STREAM);
			header.add("Content-Disposition", "attachment; filename=\"" + fileName +"\"");
			entity = new ResponseEntity<byte[]>(IOUtils.toByteArray(in), header, HttpStatus.CREATED);
		}catch(Exception e) {
			e.printStackTrace();
			entity = new ResponseEntity<byte[]>(HttpStatus.BAD_REQUEST);
		}
		
		return entity;
	}
	
	
	@Override
	public ResponseEntity<byte[]> alzipDownload(List<String> folderArray, List<String> fileArray, HttpServletRequest request,
			HttpServletResponse response) throws IOException {
		String zipFileName = "";
		System.out.println(folderArray);
		
		if(folderArray.size() != 0) {
			FolderVO alzipName = new FolderVO();
			alzipName.setFolderCd(folderArray.get(0));
			alzipName = selectMyselfFolder(alzipName);
			zipFileName = "D:/"+alzipName.getFolderName();
			System.out.println(zipFileName);
		} else {
			FolderFileVO alzipName = new FolderFileVO();
			alzipName.setFileCd(fileArray.get(0));
			alzipName = selectMyselfFile(alzipName);
			zipFileName = "D:/"+alzipName.getFileOrgname();
			System.out.println(zipFileName);
		}
		
		FileOutputStream fos = new FileOutputStream(zipFileName);
		ZipOutputStream zos = new ZipOutputStream(fos);
		
		if(folderArray != null) {
			for(int i = 0; i < folderArray.size(); i++) {
				System.out.println(folderArray.get(i));
				FolderVO folderVO = new FolderVO();
				folderVO.setFolderCd(folderArray.get(i));
				folderVO = selectMyselfFolder(folderVO);
				String folderPath = folderVO.getFolderPath();
				
				// 폴더패스의 상위폴더를 가져와 zipFolder의 소스폴더로 넣을 경로
				String sourcePath = "";
				String[] sourcePathArray = folderPath.split("/");
				for(int j = 0; j < sourcePathArray.length-1; j ++) {
					if(j == 0) {
						sourcePath += sourcePathArray[j];
					}else {
						sourcePath += "/"+sourcePathArray[j];
					}
				}
				
				System.out.println("커런트패스 : "+folderPath);
				// 전체경로와 현재경로가 같을시 문제점
				// 1. 경로를 자신을 포함했을때 : 첫폴더는 폴더간 경계가 없어진다.
				// 2. 경로를 자신을 포함하지 않을때 : 선택하지 않은 상위폴더의 하위폴더들까지 압축됨.
				// 	> 따라서 전체경로는 상위로, 현재경로는 자신을 포함한 경로로 해볼예정.
				zipFolder(sourcePath, folderPath, zos);
			}
		}
		
		if(fileArray != null) {
			for(int i = 0; i < fileArray.size(); i++) {
				FolderFileVO folderFileVO = new FolderFileVO();
				folderFileVO.setFileCd(fileArray.get(i));
				folderFileVO = selectMyselfFile(folderFileVO);
				String entryName = folderFileVO.getFileOrgname()
									+"."+folderFileVO.getFileType();
				ZipEntry ze = new ZipEntry(entryName);
	            zos.putNextEntry(ze);

	            FileInputStream fis = new FileInputStream(
	            		request.getServletContext().getRealPath("")+
						folderFileVO.getFileSavepath()+
						folderFileVO.getFileSavename());
	            byte[] buffer = new byte[1024];
	            int len;
	            while ((len = fis.read(buffer)) > 0) {
	                zos.write(buffer, 0, len);
	            }

	            fis.close();
			}
		}

		zos.close();
		
		byte[] zipFileContent = Files.readAllBytes(Paths.get(zipFileName));
	    
	    HttpHeaders headers = new HttpHeaders();
	    headers.setContentType(MediaType.APPLICATION_OCTET_STREAM);
	    headers.setContentDispositionFormData("attachment", "test.zip");
	    headers.setContentLength(zipFileContent.length);
	    
	    return new ResponseEntity<>(zipFileContent, headers, HttpStatus.OK);
		
	}
	
	

	
	// 파일 좋아요 기능을 처리해주는 서비스로직.
	@Override
	public Map<String, FolderFileVO> updateLikeSe(Map<String, Object> param) {
		
		// 파라미터값을 가져와서 넘어온 fileCd를 확인
		String fileCd = (String)param.get("fileCd");
		System.out.print("좋아요업데이트로 넘어온 파람 값 : ");
		System.out.println(fileCd);
		
		// 받은 fileCd값을 VO에 넣어준후, 해당 코드의 파일값을 구해옴.
		FolderFileVO folderFileVO = new FolderFileVO();
		folderFileVO.setFileCd(fileCd);
		
		folderFileVO = selectMyselfFile(folderFileVO);
		
		// 좋아요상태를 설정한다.
		// 좋아요상태가 아니었다면(1) set값을 '2'로 해주고,
		// 이미 좋아요 상태였다면(2) set값을 '1'로 해준다.
		if(folderFileVO.getFileLikese()==1) {
			folderFileVO.setFileLikese(2);
		} else if (folderFileVO.getFileLikese()==2) {
			folderFileVO.setFileLikese(1);
		}
		
		// 이제 업데이트 하는 로직으로 쏴준다.
		mapper.updateLikeSe(folderFileVO);
		
		// ajax리턴으로 보내줄 변경된 값을 다시 셀렉트로 가져온다.
		folderFileVO = selectMyselfFile(folderFileVO);
		
		// 마지막으로 Map에 해당내용을 담아주고 리턴시켜준다.
		Map<String, FolderFileVO> likeMap = new HashMap<String, FolderFileVO>();
		likeMap.put("fileLike", folderFileVO);
		
		System.out.println(folderFileVO.getFileLikese());
		
		mapper.updateLikeSe(folderFileVO);
		
		return likeMap;
	}

	@Override
	public Map<String, FolderFileVO> imageFileInfoAjax(Map<String, Object> param) {
		
		// ajax로 보낸 json형식의 파라미터를 받아낸다.
		String fileCd = (String)param.get("submitFileCd");
		// fileCd값을 담아 전체내용을 받아올 객체선언.
		FolderFileVO fileVO = new FolderFileVO();
		// fileVO에 json으로 받아온 fileCd값을 넣어준다.
		fileVO.setFileCd(fileCd);
		// fileCd를 가지고 자신의 파일 정보를 불러오는 서비스를 통해 전체 정보를 담아낸다.
		fileVO = selectMyselfFile(fileVO);
		
		// 맵 = 뉴해쉬맵을 선언해서 맵객체를 하나만들어준다.
		Map<String, FolderFileVO> imageMap = new HashMap<String, FolderFileVO>();
		// imageMap안에 fileVO데이터를 담아준다.
		imageMap.put("imageVO", fileVO);
		
		return imageMap;
	}
	
	
	

	
}













