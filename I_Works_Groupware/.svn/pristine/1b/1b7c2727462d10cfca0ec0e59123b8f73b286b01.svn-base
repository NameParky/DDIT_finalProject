package kr.or.ddit.controller;

import java.io.IOException;
import java.io.PrintWriter;
import java.security.Principal;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.inject.Inject;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.User;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.apache.commons.collections.map.HashedMap;
import org.apache.commons.lang.StringUtils; // lang3말고 그냥 lang로 해도 괜찮은건가...?
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import kr.or.ddit.ServiceResult;
import kr.or.ddit.service.ITaskService;
import kr.or.ddit.vo.PaginationInfoVO;
import kr.or.ddit.vo.TaskVO;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
public class TaskController {

	@Inject
	private ITaskService taskService;
	
	@PreAuthorize("hasAnyRole('ROLE_ADMIN', 'ROLE_MEMBER')")
	@RequestMapping(value="/task.do", method = RequestMethod.GET)
	public String taskList(
	        @RequestParam(name="page", required = false, defaultValue = "1") int currentPage,
	        @RequestParam(required = false, defaultValue = "title") String searchType,
	        @RequestParam(required = false) String searchWord,
	        HttpServletRequest req,
	        Model model, Principal principal
	) {
	    String empNo = principal.getName();
	    log.info("세션 아이디 : " + empNo);
	    
	    // taskVO에 empNo를 설정합니다.
	    TaskVO taskVO = new TaskVO();
	    taskVO.setEmpNo(empNo);

	    // taskService를 통해 taskList를 가져옵니다.
	    List<TaskVO> taskList = taskService.selectTaskList(taskVO);
	    
	    
	    // 모델에 taskList를 추가합니다.
	    model.addAttribute("taskList", taskList);

	    return "main/task/task";
	}

	
//	@RequestMapping(value="/task.do", method = RequestMethod.GET)
//	public String taskList() {
//		return "main/task/task";
//	}
	
	@PreAuthorize("hasAnyRole('ROLE_ADMIN', 'ROLE_MEMBER')")
	@RequestMapping(value="/taskdetail.do", method = RequestMethod.GET)
	public String taskDetail(String taskCd, Model model, Principal principal) {
		TaskVO taskVO = taskService.selectTask(taskCd);

		String empNo = principal.getName();
	    log.info("세션 아이디 : " + empNo);
	    taskVO.setEmpNo(empNo);
	    model.addAttribute("loginId", empNo);
	    
		// taskService를 통해 taskList를 가져옵니다.
	    List<TaskVO> taskdetList = taskService.selectDetTaskList(taskVO);
	    // 모델에 taskList를 추가합니다.
	    model.addAttribute("taskdetList", taskdetList);

	    List<TaskVO> teamempList = taskService.selectTeamEmpList(taskVO);
	    model.addAttribute("teamempList", teamempList);
	    log.info("teamempList : " + teamempList);
	    
	    
		model.addAttribute("taskVO", taskVO);
		return "main/task/taskDetail";
	}

	@PreAuthorize("hasAnyRole('ROLE_ADMIN', 'ROLE_MEMBER')")
	@RequestMapping(value="/taskdetinsert.do", method = RequestMethod.POST)
	public String taskdetInsert(
			String taskCd,
			TaskVO taskVO,
			Model model,
			Principal principal
			) {
		log.info("taskCd : {}", taskCd);
		
		// 업무를 서비스를 통해 db에 추가
		taskService.insertdetTask(taskVO);
		return "redirect:/taskdetail.do?taskCd=" + taskCd;
	}
	
	// 업무 작성 폼 페이지로 이동하는 메서드
	@PreAuthorize("hasAnyRole('ROLE_ADMIN', 'ROLE_MEMBER')")
	@RequestMapping(value="/taskform.do")
	public String taskForm() {
		return "main/task/taskForm";
	}
	
	// 업무를 실제로 추가하는 메서드
	@PreAuthorize("hasAnyRole('ROLE_ADMIN', 'ROLE_MEMBER')")
	@RequestMapping(value="/taskinsert.do", method = RequestMethod.POST)
	public String taskInsert(
	        TaskVO taskVO,
	        Model model, Principal principal
			) {
		String goPage = "";
		Map<String, String> errors = new HashMap<String, String>(); // 에러 메시지를 저장하는 맵
		
		if(StringUtils.isBlank(taskVO.getTaskTitle())) {
			errors.put("taskTitle", "제목을 입력해주세요");
		}
		else if(StringUtils.isBlank(taskVO.getTaskStartdate())) {
			errors.put("taskStartdate", "시작 날짜를 선택해주세요");
		}
		else if(StringUtils.isBlank(taskVO.getTaskEnddate())) {
			errors.put("taskEnddate", "종료 날짜를 선택해주세요");
		}
		else if(StringUtils.isBlank(taskVO.getTaskType())) {
			errors.put("taskTitle", "업무 유형을 입력해주세요");
		}
		
		if(errors.size() > 0) { // 에러 발생
			model.addAttribute("error", errors);
			model.addAttribute("taskVO", taskVO);
			goPage = "main/task/taskForm";
		}else {
			// 스프링 시큐리티를 이용한 사용자 정보 처리
//			User user = (User)SecurityContextHolder.getContext().getAuthentication().getPrincipal();
			String empNo = principal.getName();
		    log.info("세션 아이디 : " + empNo);
		    
		    
			// 업무 작성자로 사용자명을 설정
//			taskVO.setEmpNo(user.getUsername());
		    taskVO.setEmpNo(empNo);
			// 업무를 서비스를 통해 db에 추가
			ServiceResult result = taskService.insertTask(taskVO);
			log.info("serviceresult 값 : " + result);
			
			if(result.equals(ServiceResult.OK)) {
//				goPage = "redirect:/taskdetail.do?=taskCd" + taskVO.getTaskCd();
				goPage = "redirect:/task.do";
			}else {
				model.addAttribute("taskVO", taskVO);
				goPage = "redirect:/task.do";
			}
		}
		return goPage;
	}
	
	@PreAuthorize("hasAnyRole('ROLE_ADMIN', 'ROLE_MEMBER')")
	@RequestMapping(value="/tkturny.do", method = RequestMethod.POST)
	public String turnYChk(String taskCd, String tdCd, Model model, TaskVO taskVO) {
		log.info("taskCd : ", taskCd);
		log.info("tdCd : ", tdCd);
		// 아래꺼 실행시키면 주소가 http://localhost/taskdetail.do?taskCd=1&tdCd=4이런 식으로 taskcd뒤에 tdcd가 붙음
//		taskService.turnYChk(tdCd);
//		model.addAttribute("tdCd",tdCd);
		
		String goPage = "";
		ServiceResult result = taskService.turnYChk(tdCd);
		if(result.equals(ServiceResult.OK)) {
			goPage = "redirect:/taskdetail.do?taskCd=" + taskCd;
		}else {
			model.addAttribute("status","u");
			goPage = "main/task/task";
		}
//		model.addAttribute("taskVO", taskVO);
		return goPage;
	}

	@PreAuthorize("hasAnyRole('ROLE_ADMIN', 'ROLE_MEMBER')")
	@RequestMapping(value="/tkturnn.do", method = RequestMethod.POST)
	public String turnNChk(String taskCd, String tdCd, Model model, TaskVO taskVO) {
//		taskService.turnYChk(tdCd);
//		model.addAttribute("tdCd",tdCd);
		
		String goPage = "";
		ServiceResult result = taskService.turnNChk(tdCd);
		if(result.equals(ServiceResult.OK)) {
			goPage = "redirect:/taskdetail.do?taskCd=" + taskCd;
		}else {
			model.addAttribute("status","u");
			goPage = "main/task/task";
		}
		return goPage;
	}
	
//	deleteTd     /tkdelete.do
	@PreAuthorize("hasAnyRole('ROLE_ADMIN', 'ROLE_MEMBER')")
	@RequestMapping(value="/tkdelete.do", method = RequestMethod.POST)
	public String deleteTaskdet(
			String taskCd, String tdCd, Model model) {
		String goPage = "";
		ServiceResult result = taskService.deleteTd(tdCd);
		if(result.equals(ServiceResult.OK)) {
			goPage = "redirect:/taskdetail.do?taskCd=" + taskCd;
		}else {
			model.addAttribute("status","u");
			goPage = "main/task/task";
		}
		return goPage;
	}
	
	@PreAuthorize("hasAnyRole('ROLE_ADMIN', 'ROLE_MEMBER')")
	@RequestMapping(value="/updatetask.do", method = RequestMethod.GET)
	public String updateTaskForm(String taskCd, Model model) {
		TaskVO taskVO = taskService.selectTask(taskCd);
		model.addAttribute("taskVO", taskVO);
		
		return "main/task/taskUpdate";
	}
	
	@PreAuthorize("hasAnyRole('ROLE_ADMIN', 'ROLE_MEMBER')")
	@RequestMapping(value="/updatetask.do", method = RequestMethod.POST)
	public String updateTask(Model model, TaskVO taskVO) {
//		taskService.turnYChk(tdCd);
		String goPage = "";
		ServiceResult result = taskService.updateTask(taskVO);
		if(result.equals(ServiceResult.OK)) {
			goPage = "redirect:/taskdetail.do?taskCd=" + taskVO.getTaskCd();
			model.addAttribute("successMsg", "업무 수정에 성공했습니다.");
		}else {
//			model.addAttribute("status","u");
			model.addAttribute("errorMsg", "업무 수정에 실패했습니다.");
			goPage = "main/task/task";
		}
		return goPage;
	}
	
	@PreAuthorize("hasAnyRole('ROLE_ADMIN', 'ROLE_MEMBER')")
	@RequestMapping(value="/tkdetailupdate.do", method = RequestMethod.POST)
	public String updateChk( RedirectAttributes redirectAttributes, String taskCd, String tdCd, Model model, TaskVO taskVO) {
		String goPage = "";
		
		ServiceResult result = taskService.updateTd(taskVO);
		redirectAttributes.addFlashAttribute("contTdcd", tdCd);
		if(result.equals(ServiceResult.OK)) {
			redirectAttributes.addFlashAttribute("successMsg", "의 세부업무 수정에 성공했습니다.");
			goPage = "redirect:/taskdetail.do?taskCd=" + taskVO.getTaskCd();
		}else {
//			model.addAttribute("status","u");
			redirectAttributes.addFlashAttribute("errorMsg", "세부업무 수정에 실패했습니다.");
			goPage = "main/task/task";
		}
		return goPage;
		
	}
	
//	@PostMapping("/tkdetailcheck.do") // 서버 엔드포인트 URL (실제 URL로 대체)
//    public @ResponseBody String handleCheckboxChange(
//    		@RequestBody TaskVO taskVO
//    		) {
//        // 엔티티를 데이터베이스에 저장
//        taskService.updateCheckboxState(taskVO.get);
//
//        return "redirect:/taskdetail.do?taskCd=" + taskCd;
//    }
	
	@PreAuthorize("hasAnyRole('ROLE_ADMIN', 'ROLE_MEMBER')")
	@RequestMapping(value="/taskgantt.do", method = RequestMethod.GET)
	public String taskGantt() {
		return "main/task/taskGantt";
	}
}
