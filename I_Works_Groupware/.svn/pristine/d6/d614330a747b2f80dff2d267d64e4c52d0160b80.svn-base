package kr.or.ddit.controller.files;


import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;

import javax.inject.Inject;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.collections.map.HashedMap;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import kr.or.ddit.service.IFileService;
import kr.or.ddit.vo.FolderFileVO;
import kr.or.ddit.vo.FolderVO;

@Controller
public class indFilesController {
	
	@Inject
	private IFileService service;
	
	private void setFileBar(Model model) {
		String fileBar = "EXIST";
		model.addAttribute("fileBar", fileBar);
	}
	
	// 개인자료실로 이동
	@RequestMapping(value="/indfiles.do", method=RequestMethod.GET)
	public String IndividualFiles(Model model, HttpServletRequest req, HttpServletResponse resp) {
		
		// 파일을 업로드하고 업로드한 위치로 돌려주는 로직
		HttpSession session = req.getSession();
		System.out.println(req.getSession().getAttribute("folderCd"));
		if(session==null) {
		}else {
			String folderCd = (String)session.getAttribute("folderCd");
			String dup = (String)session.getAttribute("dup");
			String fileDup = (String)session.getAttribute("fileDup");
			session.removeAttribute("fileDup");
			session.removeAttribute("folderCd");
			session.removeAttribute("dup");
			
			if(folderCd==null) {
			}else {
				FolderVO folderVO = new FolderVO();
				folderVO.setFolderCd(folderCd);
				List<FolderVO> childFolder = service.selectChildFolder(folderVO);
				List<FolderFileVO> childFile = service.selectChildFile(folderVO);
				
				model.addAttribute("fileDup", fileDup);
				model.addAttribute("folderDup", dup);
				model.addAttribute("fileList", childFile);
				model.addAttribute("FolderList", childFolder);
				model.addAttribute("parentCd", folderVO);
				return "main/files/individualFiles";
			}
		}
		
		// 파일을 업로드하지 않고 순수 get방식으로 접근했을때 처음위치를 보여주는 로직.
		FolderVO folderVO = new FolderVO();
		
		Object principal = SecurityContextHolder.getContext().getAuthentication().getPrincipal(); 
		UserDetails userDetails = (UserDetails)principal;
		String empNo = userDetails.getUsername();
		
		String fileSavepath = req.getServletContext().getRealPath("/"+"resources"+"/"+"file")+"/"+empNo;
		System.out.println(fileSavepath);
		
		File filePath = new File(fileSavepath);
		
		if(!filePath.exists()) {
			filePath.mkdirs();
			
		}
		folderVO.setEmpNo(empNo);
		
		if(service.selectDefaultIndFolder(folderVO) < 1) {
			service.insertDefaultIndFolder(folderVO);
		}
		
		System.out.println("디폴트 폴더 가져오기");
		folderVO = service.selectIndFolder(folderVO);
		System.out.print("폴더보 : ");
		System.out.println(folderVO);
		System.out.println("디폴트폴더 차일드 가져오기");
		List<FolderVO> FolderList = service.selectChildFolder(folderVO);
		List<FolderFileVO> childFile = service.selectChildFile(folderVO);
		
		model.addAttribute("fileList", childFile);
		model.addAttribute("parentCd", folderVO);
		model.addAttribute("FolderList",FolderList);
		setFileBar(model);
		return "main/files/individualFiles";
	}
	
	// POST로 데이터를 받아 폴더안쪽으로 이동
	@RequestMapping(value="/indfiles.do", method=RequestMethod.POST)
	public String IndevidualFiles(Model model, FolderVO folderVO) {
		
		List<FolderVO> childFolder = service.selectChildFolder(folderVO);
		List<FolderFileVO> childFile = service.selectChildFile(folderVO);
		
		model.addAttribute("fileList", childFile);
		model.addAttribute("FolderList", childFolder);
		model.addAttribute("parentCd", folderVO);
		setFileBar(model);
		return "main/files/individualFiles";
	}
	// POST로 폴더이름을 받아 폴더생성.
	@RequestMapping(value="/InsertIndFileFolder.do", method=RequestMethod.POST)
	public String InsertIndFileFolder(
			FolderVO folderVO, 
			Model model, 
			HttpServletRequest req, HttpServletResponse resp) {
		service.insertIndFolder(folderVO , req, resp);
		return "redirect:/indfiles.do";	
	}
	
	// POST로 파일이름과 형태를 멀티파일형태로 받아 형태저장.
	@RequestMapping(value="/insertIndFileFile.do", method=RequestMethod.POST)
	public String InsertIndFileFile(
			FolderVO folderVO,
			Model model,
			HttpServletRequest req, HttpServletResponse resp) throws IOException {
		
		service.insertIndFile(folderVO, req, resp);
		
		return "redirect:/indfiles.do";
	}
	
	@RequestMapping(value="/fileDownload.do", method=RequestMethod.GET)
	public ResponseEntity<byte[]> fileDownload(
			String submitFileCd,
			HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		
		ResponseEntity<byte[]> entity = service.fileDownload(
				submitFileCd, request, response);
		
		return entity;
	}
	
	// 폴더배열과, 파일의배열을받고, req, resp을 이용하여 경로작업 후,
	// 알집데이터를 responseEntity값으로 ajax에 반환하는 컨트롤러.
	@RequestMapping(value="fileAlzip.do", method=RequestMethod.POST)
	public ResponseEntity<byte[]> alzipDownload(
			@RequestParam List<String> folderArray, 
			@RequestParam List<String> fileArray,
			HttpServletRequest request,
			HttpServletResponse response) throws IOException {
		
		return service.alzipDownload(folderArray, fileArray, request, response);
	}
	
	// 파일Cd값으로 좋아요를 업데이트 해줄 서비스로 보낸후 ajax로 리턴하는 컨트롤러.
	@ResponseBody
	@RequestMapping(value="updateLikeSeAjax.do", method=RequestMethod.POST)
	public Map<String, FolderFileVO> updateLikeSeAjax(
				@RequestBody Map<String, Object> param){
		return service.updateLikeSe(param);
	}
	
	// 파일의Cd값으로 파일 전체값을 리턴시켜줄 ajax 컨트롤러 로직.
	@ResponseBody
	@RequestMapping(value="imageFileInfoAjax.do", method=RequestMethod.POST)
	public Map<String, FolderFileVO> imageFileInfoAjax(
			@RequestBody Map<String, Object> param){
		return service.imageFileInfoAjax(param);
	}

}
























