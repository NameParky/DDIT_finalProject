package kr.or.ddit.service.impl;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.UUID;

import javax.annotation.Resource;
import javax.inject.Inject;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.io.CopyUtils;
import org.apache.commons.io.FileUtils;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Service;
import org.springframework.util.FileCopyUtils;
import org.springframework.web.multipart.MultipartFile;

import kr.or.ddit.mapper.BoardFileMapper;
import kr.or.ddit.mapper.EmpMapper;
import kr.or.ddit.mapper.MailMapper;
import kr.or.ddit.service.IMailService;
import kr.or.ddit.vo.EmpVO;
import kr.or.ddit.vo.FileVO;
import kr.or.ddit.vo.MailFormVO;
import kr.or.ddit.vo.MailRecVO;
import kr.or.ddit.vo.RMailVO;
import kr.or.ddit.vo.SMailVO;

@Service
public class MailServiceImpl implements IMailService{

	@Inject
	private MailMapper mapper;
	
	@Inject
	private EmpMapper empMapper;
	
	// 시큐리티에서 유저정보 꺼내오기
	private String UserNoFind() {
		Object principal = SecurityContextHolder.getContext().getAuthentication().getPrincipal(); 
		UserDetails userDetails = (UserDetails)principal;
		String empNo = userDetails.getUsername();
		return empNo;
	}
	
	
	// 받은 메일함 전체목록 가져오기
	@Override
	public List<RMailVO> selectAllRmail() {
		List<RMailVO> receiveMail = mapper.selectAllRmail(UserNoFind());
		for(int i = 0; i < receiveMail.size(); i++) {
			EmpVO empVO = new EmpVO();
			empVO = empMapper.readByUserId(receiveMail.get(i).getMailrEmpno());
			receiveMail.get(i).setMailrEmpname(empVO.getEmpName());
			empVO = empMapper.readByUserId(receiveMail.get(i).getMailsEmpno());
			receiveMail.get(i).setMailsEmpname(empVO.getEmpName());
		}
		return receiveMail;
	}

	// 받은 메일한 상세보기
	@Override
	public RMailVO selectRmailOne(RMailVO rmailVO) {
		EmpVO empVO = new EmpVO();
		rmailVO = mapper.selectRmailOne(rmailVO);
		empVO = empMapper.readByUserId(rmailVO.getMailrEmpno());
		rmailVO.setMailrEmpname(empVO.getEmpName());
		empVO = empMapper.readByUserId(rmailVO.getMailsEmpno());
		rmailVO.setMailsEmpname(empVO.getEmpName());
		return rmailVO;
	}

	
	// 파일을 받아서 파일명을 보내는 ajax
	@Override
	public Map<String, Object> SendMailAjax(List<MultipartFile> selectFileList, HttpServletRequest req,
			HttpServletResponse resp) throws IOException {
		List<FileVO> fileList = new ArrayList<FileVO>();
		for(int i = 0; i < selectFileList.size(); i++) {
			FileVO fileVO = new FileVO();
			// 랜덤네임 생성해주는 ㅠㅠ아이디.
			UUID randomName = UUID.randomUUID();
			// 파일 카피에 사용할 file(경로, 파일이름), byte[](데이터 세팅).
			String preFile = selectFileList.get(i).getOriginalFilename();
			System.out.println(preFile);
			// 저장할 랜덤이름 세팅
			fileVO.setFileSavename(randomName+preFile);
			fileVO.setFileOrgname(preFile);
			fileList.add(fileVO);
		}
		for(int i = 0; i < fileList.size(); i++) {
			System.out.println(fileList.get(i));
		}
		Map<String, Object> ajaxMap = new HashMap<String, Object>();
		ajaxMap.put("preFile", fileList);
		return ajaxMap;
	}


	@Override
	public void sendMailForm(MailFormVO mailFormVO,
								HttpServletRequest req, 
								HttpServletResponse resp) throws IOException {
		
		List<String> empList = mailFormVO.getMailEmpno();
		List<String> refList = mailFormVO.getMailRef();
		String title = mailFormVO.getMailTitle();
		String refTitle = "(ref) "+title;
		String content = mailFormVO.getMailContent();
		List<MultipartFile> fileList = mailFormVO.getFileList();
		String shareId = "";
		String shareFileId = "";
		String shareSmailEmpno = "";
		
		
		// 메일 발신자로직
		if(1==1) {
			SMailVO mail = new SMailVO();
			mail.setMailsEmpno(UserNoFind());
			mail.setMailTitle(title);
			mail.setMailContent(content);
			
			mapper.insertSmail(mail);
			mail = mapper.selectFastestOne(mail);
			mail = mapper.selectSmailOne(mail);
			String fileName = "mail"+mail.getMailNo();
			mapper.updateSmailFile(mail);
			
			shareId = mail.getMailNo();
			shareFileId = fileName;
			shareSmailEmpno = mail.getMailsEmpno();
		}
		
		
		// 메일 수신자로직
		if(empList != null) {
			for(int i = 0; i < empList.size(); i++) {
				RMailVO mail = new RMailVO();
				MailRecVO recVO = new MailRecVO();
				// 메일 번호
				mail.setMailNo(shareId);
				// 메일 제목
				mail.setMailTitle(title);
				// 메일 내용
				mail.setMailContent(content);
				// 메일 보낸사람
				mail.setMailsEmpno(shareSmailEmpno);
				// 메일 받는사람
				mail.setMailrEmpno(empList.get(i));
				// 메일 체크여부
				mail.setMailChkse("1");
				// 메일 삭제여부
				mail.setMailDelse("1");
				// 메일 중요메일여부
				mail.setMailImpse("1");
				// 메일 첨부파일 번호
				mail.setMailFileno(shareFileId);
				
				recVO.setMailNo(shareId);
				recVO.setMailrecEmpno(empList.get(i));
				
			}
		}
		
		
		// 메일 참조자 로직
		if(empList != null) {
			for(int i = 0; i < refList.size(); i++) {
				RMailVO mail = new RMailVO();
				MailRecVO recVO = new MailRecVO();
				// 메일 번호
				mail.setMailNo(shareId);
				// 메일 제목
				mail.setMailTitle(refTitle);
				// 메일 내용
				mail.setMailContent(content);
				// 메일 보낸사람
				mail.setMailsEmpno(shareSmailEmpno);
				// 메일 받는사람
				mail.setMailrEmpno(refList.get(i));
				// 메일 체크여부
				mail.setMailChkse("1");
				// 메일 삭제여부
				mail.setMailDelse("1");
				// 메일 중요메일여부
				mail.setMailImpse("1");
				// 메일 첨부파일 번호
				mail.setMailFileno(shareFileId);
				
				recVO.setMailNo(shareId);
				recVO.setMailrefEmpno(refList.get(i));
				
			}
		}
		
		
		// 파일 로직
		if(fileList!=null) {
			for(int i = 0; i < fileList.size(); i++) {
				FileVO fileVO = new FileVO();
				// 오리지날 네임 세팅
				String orgName = fileList.get(i).getOriginalFilename();
				// 세이브 네임에 사용할 ㅠㅠ아이디 세팅
				UUID uuid = UUID.randomUUID();
				// 세이브 네임 세팅
				String saveName = uuid+orgName;
				// 기본 경로 비포
				String fileBeforePath = req.getServletContext().getRealPath("");
				// 이후 설정 경로 애프터
				String fileAfterPath = "resources/file/mail/";
				// 합쳐놓는게 짧으니 일단 하나 만들자.
				String allPath = fileBeforePath+fileAfterPath;
				// 사이즈는 롱.
				long fileSize = fileList.get(i).getSize();
				// 컨텐트타입 = 마임타입 = 미디어타입.
				String fileMime = fileList.get(i).getContentType();
				// 확장자 나누기
				String[] nameArray = orgName.split("\\.");
				String fileType = nameArray[nameArray.length-1];
				// 데이터업로드할 데이터
				byte[] fileData = fileList.get(i).getBytes();
				
				
				
				// 기본경로 + 설정경로로 파일생성
				File file = new File(fileBeforePath+"/"+fileAfterPath);
				
				//없으면
				if(!file.exists()) {
					//만들어 '줘'
					file.mkdirs();
				}
				
				// 어디서 무슨이름으로 파일 만들지 정하기.
				// 이름이 겹치면 터지니까 ㅠㅠ아이디붙은 세이브네임으로 만들자.
				File targetFile = new File(allPath+saveName);
				
				// 복사
				FileCopyUtils.copy(fileData, targetFile); // 파일 복사 진행
				
				// 보세팅.
				fileVO.setFileNo(shareFileId);
				fileVO.setFileSec(i);
				fileVO.setFileOrgname(orgName);
				fileVO.setFileSavename(saveName);
				fileVO.setFileSavepath(fileAfterPath);
				fileVO.setFileSize(fileSize);
				fileVO.setFileMime(fileMime);
				fileVO.setFileType(fileType);
			}
		}
	}
}
