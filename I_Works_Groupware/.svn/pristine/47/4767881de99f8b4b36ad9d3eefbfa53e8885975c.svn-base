package kr.or.ddit.controller.mypage;

import java.security.Principal;
import java.util.HashMap;
import java.util.Map;

import javax.inject.Inject;
import javax.servlet.http.HttpServletRequest;

import org.apache.logging.log4j.core.util.PasswordDecryptor;
import org.springframework.security.core.Authentication;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import kr.or.ddit.ServiceResult;
import kr.or.ddit.mapper.EmpMapper;
import kr.or.ddit.security.CustomUser;
import kr.or.ddit.service.IAdminEmpService;
import kr.or.ddit.service.IMypageService;
import kr.or.ddit.vo.EmpVO;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
public class MyInfoController {
	
	@Inject
	private IMypageService service;
	
	@Inject
	private IAdminEmpService adService;
	
	@Inject
	private PasswordEncoder passwordEncoder;
	
	@Inject
	private EmpMapper empMapper;
	
	//내정보 확인
	@RequestMapping(value ="/myinfo.do", method = RequestMethod.GET)
	public String myInfo(Authentication auth, Model model) {
		log.info("myInfo() 실행...!");
		
		CustomUser customUser = (CustomUser)auth.getPrincipal();

		log.info("customUser 정보 "+ customUser);
		
		String empNo = customUser.getEmp().getEmpNo();
		EmpVO empVO = adService.selectOne(empNo);
		model.addAttribute("empVO", empVO);
		return "main/mypage/myinfo";
	}
	
	// 내정보 업데이트 페이지로 가기
	@RequestMapping(value = "/myInfoUpdateForm.do", method=RequestMethod.GET)
	public String myInfoUpdate(String empNo, Model model) {
		
		String rawPassword = "1234";
		log.info("1234의 인코드 : " + passwordEncoder.encode(rawPassword));
		
		EmpVO empVO = adService.selectOne(empNo);
		model.addAttribute("empVO", empVO);
		return "main/mypage/myinfoUpdate";
	}
	
	// 내정보 업데이트
	@PostMapping("/myinfoUpdate.do")
	public String myInfoUpdate(
			HttpServletRequest req, EmpVO empVO, Model model, RedirectAttributes ra) {
		
		String goPage = "";
		
		ServiceResult result = service.myInfoUpdate(req, empVO);
		if(result.equals(ServiceResult.OK)) {
			ra.addFlashAttribute("message", "회원정보 수정이 완료 되었습니다.");
			goPage = "redirect:/";
		}else {
			goPage =  "/myInfoUpdateForm.do";
		}

		return goPage;
	}
	
	
	
	//비밀번호 확인
	@ResponseBody
	@PostMapping("/checkPw.do")
	public Map<String, String> pwCheck(@RequestBody Map<String, String> map) {
		
		String empNo = map.get("empNo").toString();
		String empPw = map.get("empPw").toString();
		log.info("수정에서 "+empNo);
		log.info("수정에서 "+empPw);
		EmpVO emp = new EmpVO();
		emp.setEmpNo(empNo);
		emp.setEmpPw(empPw);
		Map<String, String> hashMap = new HashMap<String, String>();		
		hashMap = service.checkPw(emp);
		
		return hashMap ;
	}
	
		//증명서 출력
	@RequestMapping(value="/dochistory.do", method = RequestMethod.GET)
	public String docHistory() {
		return "main/mypage/dochistory";
	}
	
	@RequestMapping(value="/historydetail.do", method = RequestMethod.GET)
	public String docHistoryDetail() {
		return "mypage/historydetail";
	}
	
	@RequestMapping(value = "/notifySetting.do", method=RequestMethod.GET)
	public String notifySetting() {
		return "main/mypage/notify";
	}
	
	//회원정보 가져오기
	@ResponseBody
	@PostMapping("/forHeader")
	public EmpVO forHeader(Principal principal) {
		String empNo = principal.getName();
		
		EmpVO empVO = empMapper.readByUserId(empNo);
		log.info("forHeader->empVO" + empVO);
		
		return empVO;
	}
}






