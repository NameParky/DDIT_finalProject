package kr.or.ddit.handler;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.socket.CloseStatus;
import org.springframework.web.socket.TextMessage;
import org.springframework.web.socket.WebSocketSession;
import org.springframework.web.socket.handler.TextWebSocketHandler;

import lombok.extern.slf4j.Slf4j;

@Slf4j
public class NotifyHandler extends TextWebSocketHandler{
	
	// 세션에 접속한 인원들을 담기 위한 리스트 
	List<WebSocketSession> webSocketList = new ArrayList<WebSocketSession>();
	Map<String, WebSocketSession> userSessionMap = new HashMap<String, WebSocketSession>();
	
	@Override
	public void afterConnectionEstablished(WebSocketSession session) throws Exception { // 소켓 연결
		log.info("afterConnectionEstablished 실행...! 웹소켓 연결 성공 session 확인"+session.getId());
		// 세션 접속 인원 리스트에 담기 
		webSocketList.add(session);
		// 로그인한 아이디 정보 가져와 보내는 사람 변수에 저장
		String senderId = session.getPrincipal().getName();
		log.info("senderId : "+ senderId);
		userSessionMap.put(senderId, session);
		
		super.afterConnectionEstablished(session);
	}

	@Override
	protected void handleTextMessage(WebSocketSession session, TextMessage message) throws Exception { //소켓에 들어오는 메세지를 처리
		log.info("메세지 들어오는 지 확인 : "+"소켓"+session+"  , 메세지 : "+message);
		log.info("message.getPayload().toString() : "+ message.getPayload().toString());
		
		super.handleTextMessage(session, message);
	}

	@Override
	public void afterConnectionClosed(WebSocketSession session, CloseStatus status) throws Exception { // 소켓 연결 종료
			log.info("소켓 연결 종료...!");
		super.afterConnectionClosed(session, status);
	}

	
}
