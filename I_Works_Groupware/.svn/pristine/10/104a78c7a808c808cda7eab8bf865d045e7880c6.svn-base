package kr.or.ddit.controller.mail;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.inject.Inject;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import kr.or.ddit.mapper.EmpMapper;
import kr.or.ddit.service.IMailService;
import kr.or.ddit.vo.FileVO;
import kr.or.ddit.vo.MailFormVO;
import kr.or.ddit.vo.RMailVO;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
public class MailController {
	
	@Inject
	private IMailService service;
	
	private void setMailBar(Model model) {
		String mailBar = "EXIST";
		model.addAttribute("mailBar", mailBar);
	}

	// 메일 보내기로 이동
	@RequestMapping(value="/sendmail.do", method=RequestMethod.GET)
	public String SendMail(Model model) {
		
		setMailBar(model);
		return "main/mail/sendMail";
	}
	
	// 파일을 받아서 파일명을 보내는 ajax
	@ResponseBody
	@RequestMapping(value="/sendMailAjax.do", method=RequestMethod.POST)
	public Map<String, Object> SendMailAjax(
			@RequestParam List<MultipartFile> selectFileList,
			HttpServletRequest req, HttpServletResponse resp
			) throws IOException {
		return service.SendMailAjax(selectFileList, req, resp);
		
	}

	@ResponseBody
	@RequestMapping(value="/sendMailForm.do", method=RequestMethod.POST)
	public String sendMailForm(MailFormVO mailFormVO,
			HttpServletRequest req, HttpServletResponse resp) {
		System.out.println("샌드메일 폼 도착");
		log.info("mailFormVO => {}", mailFormVO);
		return service.sendMailForm(mailFormVO, req, resp);
	}
	

	// 받은 메일함으로 이동
	@RequestMapping(value="/receivedmail.do", method=RequestMethod.GET)
	public String ReceivedMail(Model model) {
		// 전체 메일리스트를 받아내는 서비스에서 리스트를 받아서 넣어줌.
		List<RMailVO> mailListAll = service.selectAllRmail();
		// 모델넣어주세요.
		model.addAttribute("mailListAll", mailListAll);
		// 기본모델.
		setMailBar(model);
		return "main/mail/receivedMail";
	}
	
	// 받은메일 상세화면으로 이동.
	@RequestMapping(value="/receivedMailDetail.do", method=RequestMethod.GET)
	public String receivedMailDetail(RMailVO rmailVO, Model model) {
		// rmailVO의 메일넘버를 가지고 해당 메일 전체내용을 가져옴.
		RMailVO rmail = service.selectRmailOne(rmailVO);
		// 모델넣어주세요.
		model.addAttribute("rmail", rmail);
		// 기본모델.
		setMailBar(model);
		return "main/mail/receivedMailDetail";
	}
	
	// 보낸 메일함으로 이동
	@RequestMapping(value="/sendedmail.do", method=RequestMethod.GET)
	public String SendedMail(Model model) {
		setMailBar(model);
		return "main/mail/sendedMail";
	}
	
	
	// 나에게 보낸메일함으로 이동
	@RequestMapping(value="/receivedmyselfmail.do", method=RequestMethod.GET)
	public String ReceivedMyselfMail(Model model) {


		
		setMailBar(model);
		return "main/mail/receivedMyselfMail";
	}
	
	// 나에게 메일 보내기로 이동
	@RequestMapping(value="/sendtome.do", method=RequestMethod.GET)
	public String sendToMe(Model model) {


		
		setMailBar(model);
		return "main/mail/sendToMe";
	}
	
	// 중요메일함으로 이동
	@RequestMapping(value="/importantmail.do", method=RequestMethod.GET)
	public String importantMail(Model model) {


		
		setMailBar(model);
		return "main/mail/importantMail";
	}
	
	// 삭제한메일함으로 이동
	@RequestMapping(value="/deletedmail.do", method=RequestMethod.GET)
	public String deletedMail(Model model) {


		
		setMailBar(model);
		return "main/mail/deletedMail";
	}
}














